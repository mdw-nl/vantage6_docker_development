#
# Simple developement environment for vantage6 [EXPERIMENTAL]
#
name: dev-v6

services:
  server:
    # NOTE: We could also specify the build instead of pulling from an image.
    #       But perhaps building should be left for the current vantage6/Makefile.
    #       At the moment we assume we are going to develop (purpose of this container)
    #       on the latest version which can be built via vantage6/Makefile.
    #       Using the image could become a problem if there are changes outside
    #       /vantage6 in the image that are required for changes in /vantage6
    #       (apt package dependencies for example).
    #image: harbor2.vantage6.ai/infrastructure/server:${V6_VERSION}
    image: harbor2.vantage6.ai/infrastructure/dockerized-server:${V6_VERSION}
    depends_on:
      - database
    ports:
      # TODO: This works fine on Linux, but not in MacOS, unsure about windows / Docker Desktop?
      - "127.0.6.1:80:80"
      - "127.0.6.1:5678:5678"
    environment:
      V6_INITIAL_ROOT_PASSWORD_FILE: /run/secrets/v6-root-password
      V6_SECRET_KEY_FILE: /run/secrets/v6-secret-key
      V6_DESCRIPTION: "Development vantage6 server."
      V6_POSTGRES_HOST: database
      V6_POSTGRES_USER: postgres
      V6_POSTGRES_PASSWORD_FILE: /run/secrets/postgres-password
      V6_POSTGRES_DATABASE: vantage6
      # For development only, as we live mount /vantage6 we don't want
      # root:root .pyc files on the host.
      # TODO: are we exlucluding .pyc files when building the image in vantage6?
      PYTHONDONTWRITEBYTECODE: 1
      GEVENT_SUPPORT: "True"
    volumes:
      # Development only:
      # fixtures and debugpy enabled start
      - ./server/custom-start.d/:/custom-start.d/
      - ./vantage6/:/vantage6/
    command: ["/run.sh"]
    secrets:
      - v6-secret-key
      - v6-root-password
      - postgres-password

  ui:
    image: harbor2.vantage6.ai/infrastructure/ui
    depends_on:
      - server
    ports:
      - "127.0.6.1:8080:80"
    environment:
      SERVER_URL: http://127.0.6.1
      API_PATH: /api

  database:
    image: postgres:12
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: vantage6
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres-password
    secrets:
      - postgres-password

  node-mars:
    image: harbor2.vantage6.ai/infrastructure/dockerized-node:${V6_VERSION}
    depends_on:
      - server
    ports:
      - "127.0.6.10:5678:5678"
    environment:
      V6_API_KEY_FILE: /run/secrets/v6-node-mars-api-key
      V6_SERVER_URL: http://server
      V6_SERVER_PORT: 80
      V6_API_PATH: /api
      DATA_VOLUME_NAME: dev-v6_mars-data-vol
      VPN_VOLUME_NAME: dev-v6_mars-vpn-vol
      SSH_TUNNEL_VOLUME_NAME: dev-v6_mars-ssh-vol
      # TODO: fix name in v6
      SSH_SQUID_VOLUME_NAME: dev-v6_mars-squid-vol
      # For development only, as we live mount /vantage6 we don't want
      # root:root .pyc files on the host.
      PYTHONDONTWRITEBYTECODE: 1
      GEVENT_SUPPORT: "True"
    command: ["/run.sh"]
    volumes:
      # config template
      - ./nodes/mars/config/config.yaml.j2:/mnt/config/config.yaml.j2
      # node container needs to talk to docker itself to start containers (algorithms)
      - /var/run/docker.sock:/var/run/docker.sock
      # same data volume will be mounted on the algorithm container
      - mars-data-vol:/mnt/data
      # TODO: These volumes could be mounted from within the container since it already has the names?
      # TODO: Some of them could just be created by the node an their existence transparent for the user?
      # not tested
      - mars-vpn-vol:/mnt/vpn
      - mars-ssh-vol:/mnt/ssh
      - mars-squid-vol:/mnt/squid
      # databases and databases.yaml.j2. Mounted /mnt because this is hardcoded in v6
      # see: https://github.com/vantage6/vantage6/blob/version/3.10.3/vantage6-node/vantage6/node/docker/docker_manager.py#L202-L205
      - ./nodes/mars/databases/:/mnt/databases
      # development only
      # includes pre_run.sh which allows for debugging (via debugpy)
      - ./nodes/custom-start.d/:/custom-start.d/
      - ./vantage6/:/vantage6/
    secrets:
      - v6-node-mars-api-key

  # TODO: update saturn
  node-saturn:
    image: harbor2.vantage6.ai/infrastructure/dockerized-node:${V6_VERSION}
    depends_on:
      - server
    ports:
      - "127.0.6.11:5678:5678"
    environment:
      V6_API_KEY_FILE: /run/secrets/v6-node-saturn-api-key
      V6_SERVER_URL: http://server
      V6_SERVER_PORT: 80
      V6_API_PATH: /api
      DATA_VOLUME_NAME: dev-v6_saturn-data-vol
      # For development only, as we live mount /vantage6 we don't want
      # root:root pyc's on the host.
      PYTHONDONTWRITEBYTECODE: 1
      GEVENT_SUPPORT: "True"
    command: ["/run.sh"]
    volumes:
      # node container needs to talk to docker itself to start containers (algorithms)
      - /var/run/docker.sock:/var/run/docker.sock
      # same data volume will be mounted on the algorithm container
      - saturn-data-vol:/mnt/data
      # databases and databases.yaml.j2. Mounted /mnt because this is hardcoded in v6
      # see: https://github.com/vantage6/vantage6/blob/version/3.10.3/vantage6-node/vantage6/node/docker/docker_manager.py#L202-L205
      - ./nodes/saturn/databases/:/mnt/databases
      # development only
      # includes pre_run.sh which allows for debugging (via debugpy)
      - ./nodes/custom-start.d/:/custom-start.d/      
      - ./vantage6/:/vantage6/
    secrets:
      - v6-node-saturn-api-key

  # TODO: update jupiter
  node-jupiter:
    image: harbor2.vantage6.ai/infrastructure/dockerized-node:${V6_VERSION}
    depends_on:
      - server
    environment:
      V6_API_KEY_FILE: /run/secrets/v6-node-jupiter-api-key
      V6_SERVER_URL: http://server
      V6_SERVER_PORT: 80
      V6_API_PATH: /api
      DATA_VOLUME_NAME: jupiter-data
      # For development only, as we live mount /vantage6 we don't want
      # root:root pyc's on the host.
      PYTHONDONTWRITEBYTECODE: 1
      GEVENT_SUPPORT: "True"
    command: ["/run.sh"]
    volumes:
      # node container needs to talk to docker itself to start containers (algorithms)
      - /var/run/docker.sock:/var/run/docker.sock
      # same data volume will be mounted on the algorithm container
      - jupiter-data-vol:/mnt/data
      # databases and databases.yaml.j2. Mounted /mnt because this is hardcoded in v6
      # see: https://github.com/vantage6/vantage6/blob/version/3.10.3/vantage6-node/vantage6/node/docker/docker_manager.py#L202-L205
      - ./nodes/jupiter/databases/:/mnt/databases
      # development only
      # includes pre_run.sh which allows for debugging (via debugpy)
      - ./nodes/custom-start.d/:/custom-start.d/ 
      - ./vantage6/:/vantage6/
    secrets:
      - v6-node-jupiter-api-key

# NOTE: nodes will copy file databases to this volume (/mnt/data), and mount it
#       in the algorithm container. They will also create task directories. (WIP)
#       Vantage6 uses the env var DATA_VOLUME_NAME to determine the name of the
#       volume to mount in the algorithm container. A similar approach is used
#       for the ssh volumes, vpn, etc..
volumes:
  # Mars node
  # TODO: creating most of these volumes should be optional, and done by the node (probably)
  # ... just testing here
  # NOTE: if you modify the path in 'device', you probably have to delete the volume and try again
  mars-ssh-vol:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: './nodes/mars/volumes/ssh'
  mars-vpn-vol:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: './nodes/mars/volumes/vpn'
  mars-data-vol:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: './nodes/mars/volumes/data'
  mars-logs-vol:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: './nodes/mars/volumes/logs'
  mars-squid-vol:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: './nodes/mars/volumes/squid'
  # Saturn node
  saturn-ssh-vol:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: './nodes/saturn/volumes/ssh'
  saturn-vpn-vol:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: './nodes/saturn/volumes/vpn'
  saturn-data-vol:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: './nodes/saturn/volumes/data'
  saturn-logs-vol:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: './nodes/saturn/volumes/logs'
  saturn-squid-vol:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: './nodes/saturn/volumes/squid'
  # Jupiter node
  jupiter-data-vol:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: './nodes/jupiter/volumes/data'


secrets:
  v6-secret-key:
    file: ./dev-secrets/secret-key
  v6-root-password:
    file: ./dev-secrets/initial-root-password
  postgres-password:
    file: ./dev-secrets/postgres-password
  v6-node-mars-api-key:
    file: ./dev-secrets/node-mars-api-key
  v6-node-saturn-api-key:
    file: ./dev-secrets/node-saturn-api-key
  v6-node-jupiter-api-key:
    file: ./dev-secrets/node-jupiter-api-key
